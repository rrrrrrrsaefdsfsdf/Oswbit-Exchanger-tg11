# handlers/operator.py
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.models import Database
from keyboards.inline import Keyboards
from keyboards.reply import ReplyKeyboards
from config import config

logger = logging.getLogger(__name__)
router = Router()

class OperatorStates(StatesGroup):
    waiting_for_note = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(config.DATABASE_URL)

# –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
OPERATORS = [
    config.ADMIN_USER_ID
]

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == config.ADMIN_USER_ID

def is_operator(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏)"""
    return user_id in OPERATORS

def is_operator_chat(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —á–∞—Ç–∞"""
    return chat_id == config.OPERATOR_CHAT_ID

def can_handle_orders(user_id: int, chat_id: int) -> bool:
    """–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ"""
    return (is_operator(user_id) or is_admin(user_id)) and is_operator_chat(chat_id)

async def notify_operators_paid_order(bot, order: dict, received_sum: float = None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        display_id = order.get('personal_id', order['id'])
        if not received_sum:
            received_sum = order.get('total_amount', 0)
        
        text = (
            f"üí∞ <b>–ó–ê–Ø–í–ö–ê –û–ü–õ–ê–ß–ï–ù–ê</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç ID: {order.get('user_id', 'N/A')}\n"
            f"üíµ –ü–æ–ª—É—á–µ–Ω–æ: {received_sum:,.0f} ‚ÇΩ\n"
            f"üí∞ –°—É–º–º–∞ –∑–∞—è–≤–∫–∏: {order['total_amount']:,.0f} ‚ÇΩ\n"
            f"‚Çø –ö –æ—Ç–ø—Ä–∞–≤–∫–µ: {order['amount_btc']:.8f} BTC\n"
            f"üìç –ê–¥—Ä–µ—Å: <code>{order['btc_address']}</code>\n\n"
            f"‚è∞ –°–æ–∑–¥–∞–Ω–∞: {order.get('created_at', 'N/A')}\n"
            f"üì± –¢–∏–ø: {order.get('payment_type', 'N/A')}\n\n"
            f"üéØ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ Bitcoin!</b>"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª Bitcoin", 
                callback_data=f"op_sent_{order['id']}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞", 
                callback_data=f"op_problem_{order['id']}"
            ),
            InlineKeyboardButton(
                text="üìù –ó–∞–º–µ—Ç–∫–∞", 
                callback_data=f"op_note_{order['id']}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏", 
                callback_data=f"op_details_{order['id']}"
            )
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç
        await bot.send_message(
            config.OPERATOR_CHAT_ID,
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Notify operators paid order error: {e}")

async def notify_operators_error_order(bot, order: dict, error_message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ –≤ –∑–∞—è–≤–∫–µ"""
    try:
        display_id = order.get('personal_id', order['id'])
        
        text = (
            f"‚ö†Ô∏è <b>–û–®–ò–ë–ö–ê –í –ó–ê–Ø–í–ö–ï</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç ID: {order.get('user_id', 'N/A')}\n"
            f"üí∞ –°—É–º–º–∞: {order['total_amount']:,.0f} ‚ÇΩ\n"
            f"‚ùå –û—à–∏–±–∫–∞: {error_message}\n\n"
            f"‚è∞ –°–æ–∑–¥–∞–Ω–∞: {order.get('created_at', 'N/A')}\n\n"
            f"üîß <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!</b>"
        )
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="üîß –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", 
                callback_data=f"op_handle_{order['id']}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                callback_data=f"op_cancel_{order['id']}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üìù –ó–∞–º–µ—Ç–∫–∞", 
                callback_data=f"op_note_{order['id']}"
            )
        )
        
        await bot.send_message(
            config.OPERATOR_CHAT_ID,
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Notify operators error order error: {e}")

async def notify_client_payment_received(bot, order: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        display_id = order.get('personal_id', order['id'])
        
        text = (
            f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üí∞ –°—É–º–º–∞: {order['total_amount']:,.0f} ‚ÇΩ\n"
            f"‚Çø –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {order['amount_btc']:.8f} BTC\n\n"
            f"üîÑ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É...</b>\n"
            f"Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.\n\n"
            f"üì± –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."
        )
        
        await bot.send_message(
            order['user_id'],
            text,
            parse_mode="HTML",
            reply_markup=ReplyKeyboards.main_menu()
        )
        
    except Exception as e:
        logger.error(f"Notify client payment received error: {e}")

async def notify_client_order_cancelled(bot, order: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏"""
    try:
        display_id = order.get('personal_id', order['id'])
        
        text = (
            f"‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üí∞ –°—É–º–º–∞: {order['total_amount']:,.0f} ‚ÇΩ\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã\n\n"
            f"–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞."
        )
        
        await bot.send_message(
            order['user_id'],
            text,
            parse_mode="HTML",
            reply_markup=ReplyKeyboards.main_menu()
        )
        
    except Exception as e:
        logger.error(f"Notify client order cancelled error: {e}")

async def notify_client_order_completed(bot, order: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏"""
    try:
        display_id = order.get('personal_id', order['id'])
        
        text = (
            f"üéâ <b>–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"‚Çø –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {order['amount_btc']:.8f} BTC\n"
            f"üìç –ù–∞ –∞–¥—Ä–µ—Å: <code>{order['btc_address']}</code>\n\n"
            f"‚úÖ <b>Bitcoin —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {config.EXCHANGE_NAME}!"
        )
        
        await bot.send_message(
            order['user_id'],
            text,
            parse_mode="HTML",
            reply_markup=ReplyKeyboards.main_menu()
        )
        
    except Exception as e:
        logger.error(f"Notify client order completed error: {e}")

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è OnlyPays
async def process_onlypays_webhook(webhook_data: dict, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç OnlyPays"""
    try:
        order_id = webhook_data.get('personal_id')  # –ù–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∑–∞—è–≤–∫–∏
        onlypays_id = webhook_data.get('id')
        status = webhook_data.get('status')
        received_sum = webhook_data.get('received_sum')
        
        if not order_id:
            logger.error(f"Webhook without personal_id: {webhook_data}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
        order = await db.get_order(int(order_id))
        if not order:
            logger.error(f"Order not found: {order_id}")
            return
        
        if status == 'finished':
            # –ó–∞—è–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º
            await db.update_order(
                order['id'], 
                status='paid_by_client',
                received_sum=received_sum
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
            await notify_operators_paid_order(bot, order, received_sum)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            await notify_client_payment_received(bot, order)
            
        elif status == 'cancelled':
            # –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
            await db.update_order(order['id'], status='cancelled')
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–º–µ–Ω–µ
            await notify_client_order_cancelled(bot, order)
            
    except Exception as e:
        logger.error(f"Webhook processing error: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–¢–û–õ–¨–ö–û –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏)
@router.callback_query(F.data.startswith("op_sent_"))
async def operator_sent_handler(callback: CallbackQuery):
    """–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª Bitcoin"""
    if not can_handle_orders(callback.from_user.id, callback.message.chat.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[-1])
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        await db.update_order(order_id, status='completed')
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        order = await db.get_order(order_id)
        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        display_id = order.get('personal_id', order_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await notify_client_order_completed(callback.bot, order)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–ê–Ø–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –û–±—Ä–∞–±–æ—Ç–∞–ª: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üíé Bitcoin –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è")
        
    except Exception as e:
        logger.error(f"Operator sent handler error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

@router.callback_query(F.data.startswith("op_problem_"))
async def operator_problem_handler(callback: CallbackQuery):
    """–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–∞–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ"""
    if not can_handle_orders(callback.from_user.id, callback.message.chat.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[-1])
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        await db.update_order(order_id, status='problem')
        
        order = await db.get_order(order_id)
        display_id = order.get('personal_id', order_id) if order else order_id
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        admin_text = (
            f"‚ö†Ô∏è <b>–ü–†–û–ë–õ–ï–ú–ù–ê–Ø –ó–ê–Ø–í–ö–ê</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )
        
        await callback.bot.send_message(
            config.ADMIN_CHAT_ID,
            admin_text,
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚ö†Ô∏è <b>–ó–ê–Ø–í–ö–ê –û–¢–ú–ï–ß–ï–ù–ê –ö–ê–ö –ü–†–û–ë–õ–ï–ú–ù–ê–Ø</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üì® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω",
            parse_mode="HTML"
        )
        
        await callback.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è")
        
    except Exception as e:
        logger.error(f"Operator problem handler error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("op_note_"))
async def operator_note_handler(callback: CallbackQuery, state: FSMContext):
    """–û–ø–µ—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É"""
    if not can_handle_orders(callback.from_user.id, callback.message.chat.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[-1])
    
    await state.update_data(
        note_order_id=order_id, 
        note_message_id=callback.message.message_id,
        note_user_id=callback.from_user.id
    )
    
    await callback.bot.send_message(
        callback.message.chat.id,
        f"üìù <b>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –∑–∞—è–≤–∫–µ #{order_id}</b>\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
        parse_mode="HTML"
    )
    
    await state.set_state(OperatorStates.waiting_for_note)
    await callback.answer()

@router.callback_query(F.data.startswith("op_details_"))
async def operator_details_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏"""
    if not can_handle_orders(callback.from_user.id, callback.message.chat.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[-1])
    
    try:
        order = await db.get_order(order_id)
        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        display_id = order.get('personal_id', order_id)
        
        text = (
            f"üìã <b>–î–ï–¢–ê–õ–ò –ó–ê–Ø–í–ö–ò #{display_id}</b>\n\n"
            f"üÜî ID: {order['id']}\n"
            f"üîó OnlyPays ID: {order.get('onlypays_id', 'N/A')}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['user_id']}\n"
            f"üí∞ –°—É–º–º–∞: {order['total_amount']:,.0f} ‚ÇΩ\n"
            f"‚Çø Bitcoin: {order['amount_btc']:.8f} BTC\n"
            f"üí± –ö—É—Ä—Å: {order.get('rate', 0):,.0f} ‚ÇΩ\n"
            f"üí≥ –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞: {order.get('processing_fee', 0):,.0f} ‚ÇΩ\n"
            f"üèõ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {order.get('admin_fee', 0):,.0f} ‚ÇΩ\n"
            f"üì± –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {order.get('payment_type', 'N/A')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {order.get('status', 'N/A')}\n"
            f"‚è∞ –°–æ–∑–¥–∞–Ω–∞: {order.get('created_at', 'N/A')}\n\n"
            f"‚Çø <b>BTC –∞–¥—Ä–µ—Å:</b>\n<code>{order.get('btc_address', 'N/A')}</code>\n\n"
            f"üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n{order.get('requisites', 'N/A')}"
        )
        
        await callback.answer()
        await callback.bot.send_message(
            callback.message.chat.id,
            text,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Operator details handler error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π")

@router.callback_query(F.data.startswith("op_cancel_"))
async def operator_cancel_handler(callback: CallbackQuery):
    """–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É"""
    if not can_handle_orders(callback.from_user.id, callback.message.chat.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[-1])
    
    try:
        await db.update_order(order_id, status='cancelled')
        
        order = await db.get_order(order_id)
        if order:
            await notify_client_order_cancelled(callback.bot, order)
        
        display_id = order.get('personal_id', order_id) if order else order_id
        
        await callback.message.edit_text(
            f"‚ùå <b>–ó–ê–Ø–í–ö–ê –û–¢–ú–ï–ù–ï–ù–ê</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –û—Ç–º–µ–Ω–∏–ª: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üì® –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω",
            parse_mode="HTML"
        )
        
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"Operator cancel handler error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏")

@router.message(OperatorStates.waiting_for_note)
async def note_input_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    data = await state.get_data()
    order_id = data.get('note_order_id')
    note_user_id = data.get('note_user_id')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ—Ç–∫—É –ø–∏—à–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if note_user_id != message.from_user.id or not can_handle_orders(message.from_user.id, message.chat.id):
        return
    
    if not order_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    note_text = message.text
    
    try:
        order = await db.get_order(order_id)
        display_id = order.get('personal_id', order_id) if order else order_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        admin_text = (
            f"üìù <b>–ó–ê–ú–ï–¢–ö–ê –ö –ó–ê–Ø–í–ö–ï</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: @{message.from_user.username or message.from_user.first_name}\n"
            f"üìù –ó–∞–º–µ—Ç–∫–∞: {note_text}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        await message.bot.send_message(
            config.ADMIN_CHAT_ID,
            admin_text,
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –ë–î (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–µ –ø–æ–ª–µ)
        try:
            await db.update_order(order_id, operator_notes=note_text)
        except:
            pass  # –ï—Å–ª–∏ –ø–æ–ª—è –Ω–µ—Ç –≤ –ë–î, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        
        await message.answer(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –∫ –∑–∞—è–≤–∫–µ #{display_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–æ–π –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        try:
            await message.delete()
        except:
            pass
        
    except Exception as e:
        logger.error(f"Note handler error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")
    
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
async def add_operator(user_id: int) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å)"""
    if user_id not in OPERATORS:
        OPERATORS.append(user_id)
        logger.info(f"Added operator: {user_id}")
        return True
    return False

async def remove_operator(user_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å)"""
    if user_id in OPERATORS:
        OPERATORS.remove(user_id)
        logger.info(f"Removed operator: {user_id}")
        return True
    return False

def get_operators_list() -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    return OPERATORS.copy()




